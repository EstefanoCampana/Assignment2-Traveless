@page "/reservations"
@using BlazorHybridApp.Data

<h3 class="text-center">Reservations Finder</h3>
<div class="d-flex gap-2">
	<div class="d-flex flex-column w-100">
		<label>Code:</label>
		<input @bind=findRcode placeholder="Any" class="form-control h-100" />
	</div>
	<div class="d-flex flex-column w-100">
		<label>Airline:</label>
		<input @bind=findAname placeholder="Any" class="form-control h-100" />
	</div>
	<div class="d-flex flex-column w-100">
		<label>Name:</label>
		<input @bind=findCname placeholder="Any" class="form-control h-100" />
	</div>
	<div class="d-flex flex-column w-100">
		<label>&nbsp;</label>
		<button @onclick="ReservationFinder" class="btn btn-primary w-100 h-100">Find Reservations</button>
	</div>
</div>

<br/>

<div>
	<h3 class="text-center">Reservations</h3>
	<div class="border rounded">
		@if (result == null || !result.Any())
		{
			<p> Loading...</p>
		}
		else
		{
			<select class="form-select">
				@foreach (Reservation res in result)
				{
					<option>@res</option>
				}
			</select>
		}
	</div>
</div>

<br/>

<h3 class="text-center">Reservation</h3>
<form>
	<div>
		<label>Reservation Code:</label>
		<input @bind=reservation.Rcode disabled type="text" class="form-control" placeholder="Reservation Code">
	</div>
	<div>
		<label>Flight Code:</label>
		<input @bind=reservation.Fcode disabled type="text" class="form-control" placeholder="Flight Code">
	</div>
	<div>
		<label>Airline:</label>
		<input @bind=reservation.Aname disabled type="text" class="form-control" placeholder="Airline">
	</div>
	<div>
		<label>Cost:</label>
		<input @bind=reservation.Cost disabled type="text" class="form-control" placeholder="Cost">
	</div>
	<div>
		<label>Name:</label>
		<input @bind=reservation.Cname type="text" class="form-control" placeholder="Name">
	</div>
	<div>
		<label>Citizenship:</label>
		<input @bind=reservation.Citizenship type="text" class="form-control" placeholder="Citizenship">
	</div>
	<div>
		<label>Status:</label>
		<input @bind=reservation.Status type="text" class="form-control" placeholder="Status">
	</div>
	<br/>
	<button class="btn btn-primary" @onclick=Update>Update</button>
</form>

@code{

	Reservation reservation = new Reservation();
	List<Reservation> result = ReservationManager.PopulatedReservations();

	string errorMessage = String.Empty;
	string findRcode = String.Empty;
	string findAname = String.Empty;
	string findCname = String.Empty;

	private async Task Update()
	{
		string path = Path.Combine(Directory.GetCurrentDirectory(), @"..\..\..\..\Resources\Res\reservations_data.json");
		string message = String.Empty;
		try
		{
			if(String.IsNullOrEmpty(reservation.Cname) ||
				String.IsNullOrEmpty(reservation.Citizenship) ||
				String.IsNullOrEmpty(reservation.Status))
			{
				errorMessage = "Please fill all the entries";
				await App.Current.MainPage.DisplayAlert("Exception", $"{errorMessage}", "OK");
			}
			else
			{
				message = $"File has been succesfully saved to {path}";
				errorMessage = String.Empty;
				ReservationManager.WriteToJson();
				await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK");
			}
		}
		catch (FormatException ex)
		{
			errorMessage = ex.Message;
			await App.Current.MainPage.DisplayAlert("Exception", $"{errorMessage}", "OK");
		}
	}

	private async Task ReservationFinder()
	{
		result = ReservationManager.FindReservation(findRcode, findAname, findCname);
		string message = String.Empty;

		// If the reutrned list is empty
		if (result.Count == 0)
		{
			message = "No reservation is found";
		}
		// If there is only one returned list object
		else if (result.Count == 1)
		{
			message = $"{result.Count} reservation is found";
		}
		// If there are more than one returned objects
		else
		{
			message = $"{result.Count} reservations are found";
		}

		await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK"); // Display the indicated message
		ClearFields();  // Clear the fields for the next input

	}

	private void ClearFields()
	{
		findRcode = "";
		findAname = "";
		findCname = "";
	}

}
