@page "/flights"
@using BlazorHybridApp.Data

<h3 class="text-center">Flight Finder</h3>

<div class="d-flex gap-2">
    <div class="d-flex flex-column w-100">
        <label for="from">From:</label>
        <InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="from">
            <option value="" selected>Any</option>
            @foreach (Flight flight in fliList)
            {
                <option value=@flight.From>@flight.From</option>
            }
        </InputSelect>
    </div>
    <div class="d-flex flex-column w-100">
        <label for="to">To:</label>
        <InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="to">
            <option value="" selected>Any</option>
            @foreach (Flight flight in fliList)
            {
                <option value=@flight.To>@flight.To</option>
            }
        </InputSelect>
    </div>
    <div class="d-flex flex-column w-100">
        <label for="day">Day:</label>
        <InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="day">
            <option value="" selected>Any</option>
            @foreach (Flight flight in fliList)
            {
                <option value=@flight.Day>@flight.Day</option>
            }
        </InputSelect>
    </div>
    <div class="d-flex flex-column w-100">
        <label>&nbsp;</label> 
        <button @onclick="SearchFlights" class="btn btn-primary w-100 h-100">Find flights</button>
    </div>
</div> 

<br/>

<div>
    <h3 class="text-center">Flights</h3>
    <div class="border rounded">
        @if (flights == null || !flights.Any())
        {
            <p> Loading...</p>
        }
        else
        {
            <InputSelect class="form-select" @bind-Value:get="selected" @bind-Value:set="SetSelected">
                @foreach (Flight flight in flights)
                {
                    <option value=@flight.FlightCode>@flight</option>
                }
            </InputSelect>
        }
    </div>
</div>

<br/>

<h3 class="text-center">Reserve </h3>
<form>
    <div>
        <label>Flight Code:</label>
        <input disabled @bind=flight.FlightCode type="text" class="form-control" placeholder="Flight Code">
    </div>
    <div>
        <label>Airline:</label>
        <input disabled @bind="flight.Airline" type="text" class="form-control" placeholder="Airline">
    </div>
    <div>
        <label>Day:</label>
        <input disabled @bind="flight.Day" type="text" class="form-control" placeholder="Day">
    </div>
    <div>
        <label>Time:</label>
        <input disabled @bind="flight.Time" type="text" class="form-control" placeholder="Time">
    </div>
    <div>
        <label>Cost:</label>
        <input disabled @bind="flight.Cost" type="text" class="form-control" placeholder="0">
    </div>
    <div>
        <label>Name:</label>
        <input @bind="reservation.Cname" type="text" class="form-control" placeholder="Name">
    </div>
    <div>
        <label>Citizenship:</label>
        <input @bind="reservation.Citizenship" type="text" class="form-control" placeholder="Citizenship">
    </div>
</form>

<br/>

<div class="d-flex justify-content-center">
    <button class="text-center btn btn-primary" @onclick=ReserveFlight>Update</button>
</div>

@code {

    string selected = null!;
    private string from = String.Empty;
    private string to = String.Empty;
    private string day = String.Empty; 
    string errorMessage = String.Empty;
    List<Flight> flights = FlightManagement.PopulatedFlights();
    List<Flight> fliList = FlightManagement.PopulatedFlights();
    Flight flight { get; set; } = new Flight();
    Reservation reservation = new Reservation();

    void SetSelected(string value)
    {
        var fli = flights.Find(e => e.FlightCode == value);
        if (fli != null)
        {
            flight = fli;
        }
        selected = value;
    }
    private async Task SearchFlights()
    {
        if (!string.IsNullOrWhiteSpace(from) && !string.IsNullOrWhiteSpace(to) && !string.IsNullOrWhiteSpace(day))
        {
            flights = await Task.Run(() => FlightManagement.FlightsFound(from, to, day));
            if (flights.Count == 1)
            {
                flight = flights[0];
            }
        }

    }

    private async Task ReserveFlight()
    {
        string message = "Reservation succesfully created.";
        try
        {
            if (String.IsNullOrEmpty(reservation.Cname) ||
                String.IsNullOrEmpty(reservation.Citizenship))
            {
                errorMessage = "Please fill all the entries";
                await App.Current.MainPage.DisplayAlert("Exception", $"{errorMessage}", "OK");
            }
            else if (flight.AvailableSeats == 0)
            {
                errorMessage = "Flight is fully booked.";
                await App.Current.MainPage.DisplayAlert("Exception", $"{errorMessage}", "OK");
            }
            else
            {
                errorMessage = String.Empty;
                ReservationManager.MakeReservation(flight, reservation.Cname, reservation.Citizenship);
                ReservationManager.WriteToJson();
                await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK");
            }
        }
        catch (FormatException ex)
        {
            errorMessage = ex.Message;
            await App.Current.MainPage.DisplayAlert("Format Exception", $"{errorMessage}", "OK");
        }
    }
}
