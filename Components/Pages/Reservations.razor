@page "/reservations"
@using BlazorHybridApp.Data

<h3 class="text-center">Reservations Finder</h3>
<div class="d-flex gap-2">
	<div class="d-flex flex-column w-100">
		<label>Code:</label>
		<InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="findRcode">
			<option value="" selected>Any</option>
			@foreach (Reservation res in listedRes)
			{
				<option value=@res.Rcode>@res.Rcode</option>
			}
		</InputSelect>
	</div>
	<div class="d-flex flex-column w-100">
		<label>Airline:</label>
		<InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="findAname">
			<option value="" selected>Any</option>
			@foreach (Reservation res in listedRes)
			{
				<option value=@res.Aname>@res.Aname</option>
			}
		</InputSelect>
	</div>
	<div class="d-flex flex-column w-100">
		<label>Name:</label>
		<InputSelect class="form-select h-100" placeholder="Any" @bind-Value:get="findCname">
			<option value="" selected>Any</option>
			@foreach (Reservation res in listedRes)
			{
				<option value=@res.Cname>@res.Cname</option>
			}
		</InputSelect>
	</div>
	<div class="d-flex flex-column w-100">
		<label>&nbsp;</label>
		<button @onclick=ReservationFinder class="btn btn-primary w-100 h-100">Find Reservations</button>
	</div>
</div>

<br/>

<div class="form-group">
	<h3 class="text-center">Reservations</h3>
	@if (!isOnFocused)
	{
		<input disabled class="form-control h-100" placeholder="Loading..."/>
	}
	else if(result.Count == 0)
	{
		<input disabled class="form-control h-100" placeholder="No Reservation"/>
	}
	else
	{
		<InputSelect class="form-select" @bind-Value:get="selected" @bind-Value:set="SetSelected">
			@foreach(Reservation res in result)
			{
				<option value=@res.Rcode>@res</option>
			}
		</InputSelect>
	}
</div>

<br/>

<h3 class="text-center">Reservation</h3>
<form>
	<div>
		<label>Reservation Code:</label>
		<input @bind=reservation.Rcode disabled type="text" class="form-control" placeholder="Reservation Code">
	</div>
	<div>
		<label>Flight Code:</label>
		<input @bind=reservation.Fcode disabled type="text" class="form-control" placeholder="Flight Code">
	</div>
	<div>
		<label>Airline:</label>
		<input @bind=reservation.Aname disabled type="text" class="form-control" placeholder="Airline">
	</div>
	<div>
		<label>Cost:</label>
		<input @bind=reservation.Cost disabled type="text" class="form-control" placeholder="Cost">
	</div>
	<div>
		<label>Name:</label>
		<input @bind=reservation.Cname type="text" class="form-control" placeholder="Name">
	</div>
	<div>
		<label>Citizenship:</label>
		<input @bind=reservation.Citizenship type="text" class="form-control" placeholder="Citizenship">
	</div>
	<div>
		<label>Status:</label>
		<select class="form-select" @bind=reservation.Status>
			<option>Active</option>
			<option>Inactive</option>
		</select>
	</div>
</form>

<br/>

<div class="d-flex justify-content-center">
	<button class="text-center btn btn-primary"@onclick=Update>Update</button>
</div>
@code{
	List<Reservation> result = ReservationManager.PopulatedReservations();
	Reservation reservation { get; set; } = new Reservation();
	List<Reservation> listedRes = ReservationManager.PopulatedReservations();

	string selected = null!;
	string errorMessage = String.Empty;
	string findRcode = String.Empty;
	string findAname = String.Empty;
	string findCname = String.Empty;
	bool isOnFocused = false;

	void SetSelected(string value)
	{
		var res = result.Find(e => e.Rcode == value);
		if (res != null)
		{
			reservation = res;
		}
		selected = value;
	}

	private async Task Update()
	{	
		string path = Path.Combine(Directory.GetCurrentDirectory(), @"..\..\..\..\Resources\Res\reservations_data.json");
		string message = $"File has been succesfully saved to:/n{path}";
		try
		{
			if(String.IsNullOrEmpty(reservation.Cname) ||
				String.IsNullOrEmpty(reservation.Citizenship))
			{
				errorMessage = "Please fill all the entries";
				await App.Current.MainPage.DisplayAlert("Exception", $"{errorMessage}", "OK");
			}
			else{
				errorMessage = String.Empty;
				ReservationManager.WriteToJson();
				await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK");
			}
		}
		catch (FormatException ex)
		{
			errorMessage = ex.Message;
			await App.Current.MainPage.DisplayAlert("Format Exception", $"{errorMessage}", "OK");
		}
	}

	private async Task ReservationFinder()
	{

		isOnFocused = true;
		result = ReservationManager.FindReservation(findRcode, findAname, findCname);
		string message = String.Empty;
		// If the reutrned list is empty
		if (result.Count == 0)
		{
			message = "No reservation is found. Please search again";
			reservation = new Reservation();    // clear the fill-in if any
		}
		// If there is only one returned list object
		else if (result.Count == 1)
		{
			message = $"{result.Count} reservation is found";
			reservation = result[0];    // set the default fill-in
		}
		// If there are more than one returned objects
		else
		{
			message = $"{result.Count} reservations are found";
			reservation = result[0];    // set the default fill-in
		}

		await App.Current.MainPage.DisplayAlert("Success", $"{message}", "OK"); // Display the indicated message
		ClearFields();  // Clear the fields for the next input
		
	}

	private void ClearFields()
	{
		findRcode = "";
		findAname = "";
		findCname = "";
	}

}
